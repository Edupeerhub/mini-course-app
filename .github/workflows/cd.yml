# .github/workflows/deploy.yml
name: Deploy

on:
  push:
    branches: [ main, aws-monorepo-deployment ]
  workflow_run:
    workflows: ["Frontend CI", "Backend CI"]
    branches: [ main ]
    types: [ completed ]

env:
  # Global environment variables
  NODE_VERSION: '18'
  DEPLOYMENT_ENV: 'production'

jobs:
  deploy-staging:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/aws-monorepo-deployment'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.HOSTADDRESS }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.PRIVATE_SSH_KEY }}
          script: |
            export STAGING_MONGO_URI="${{ secrets.STAGING_MONGO_URI }}"
            export STAGING_JWT_SECRET="${{ secrets.STAGING_JWT_SECRET }}"
            export ENV="${{ secrets.ENV }}"
            export HOSTADDRESS="${{ secrets.HOSTADDRESS }}"
            export SSH_PUBLIC_KEY="${{ secrets.PUBLIC_SSH_KEY }}"

     
            # Remove existing deployment if it exists
            rm -rf mini-course-app
            
            # Create and run deployment script
            cat > deploy.sh << 'SCRIPT'
            #!/bin/bash
            
            # Mini-course-app deployment script
            # Exit on any error
            set -e
            
            # Update system and install dependencies
            sudo apt update
            sudo apt install npm nginx -y
            
            # Clone and setup application
            git clone -b aws-monorepo-deployment https://github.com/Edupeerhub/mini-course-app.git
            
            # Build frontend
            cd client
            npm install
            npm run build
            cd ..
            
            # Setup backend
            cd server
            npm install
            
            # Create environment file
            cat <<ENVEOF > .env
            # Backend
            MONGODB_URI=$STAGING_MONGO_URI
            PORT=3000
            # Auth
            JWT_SECRET=$STAGING_JWT_SECRET
            JWT_EXPIRES_IN=7d
            # Environment
            NODE_ENV=$ENV
            ENVEOF
            
            echo ".env file created for $ENV"
            cd ..
            
            # Configure nginx reverse proxy
            cat <<NGINXEOF | sudo tee /etc/nginx/sites-available/webpage > /dev/null
            server {
                listen 80;
                server_name $HOSTADDRESS;
                location / {
                    proxy_pass http://127.0.0.1:3000;
                    proxy_http_version 1.1;
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                }
            }
            NGINXEOF
            
            # Enable nginx site
            sudo ln -s /etc/nginx/sites-available/webpage /etc/nginx/sites-enabled/ || true
            sudo nginx -t
            sudo systemctl reload nginx
            
            # Start application with PM2
            cd server
            sudo npm install -g pm2
            
            # Stop existing app if running
            pm2 stop mini-course-app || true
            pm2 delete mini-course-app || true
            
            # Start new app
            pm2 start npm --name "mini-course-app" -- start
            pm2 save
            pm2 startup
            
            echo "Deployment completed successfully!"
            echo "Application accessible at: http://$HOSTADDRESS"
            SCRIPT
            
            # Make script executable and run it
            chmod +x deploy.sh
            ./deploy.sh
          
            
      # - name: Verify staging deployment
      #   run: |

      - name: Verify staging deployment
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.HOSTADDRESS }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.PRIVATE_SSH_KEY }}
          script : |
            echo "Waiting for deployment to be ready..."
            sleep 30
            curl -f ${{ secrets.STAGING_API_URL }}/login || exit 1
            echo "Staging deployment successful!"
  #  run: |
  #         ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.HOSTADDRESS }} << 'EOF'
  #         # Set environment variables
  #         export STAGING_MONGO_URI="${{ secrets.STAGING_MONGO_URI }}"
  #         export STAGING_JWT_SECRET="${{ secrets.STAGING_JWT_SECRET }}"
  #         export ENV="${{ secrets.ENV }}"
  #         export HOSTADDRESS="${{ secrets.HOSTADDRESS }}"
  #         export SSH_PUBLIC_KEY="${{ secrets.PUBLIC_SSH_KEY }}"

  # deploy-production:
  #   runs-on: ubuntu-latest
  #   needs: deploy-staging
  #   if: github.ref == 'refs/heads/main'
  #   environment: production
    
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
      
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}
  #         cache: 'npm'
  #         cache-dependency-path: |
  #           frontend/package-lock.json
  #           backend/package-lock.json
      
  #     - name: Install dependencies
  #       run: |
  #         cd frontend && npm ci
  #         cd ../backend && npm ci
      
  #     - name: Build applications
  #       run: |
  #         cd frontend && npm run build
  #         cd ../backend && npm run build
      
  #     - name: Make deploy script executable
  #       run: chmod +x scripts/deploy.sh
      
  #     - name: Deploy to production
  #       run: ./scripts/deploy.sh production
  #       env:
  #         # Pass secrets to the script
  #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  #         PRODUCTION_API_URL: ${{ secrets.PRODUCTION_API_URL }}
  #         PRODUCTION_FRONTEND_URL: ${{ secrets.PRODUCTION_FRONTEND_URL }}
  #         PRODUCTION_S3_BUCKET: ${{ secrets.PRODUCTION_S3_BUCKET }}
  #         PRODUCTION_CLOUDFRONT_ID: ${{ secrets.PRODUCTION_CLOUDFRONT_ID }}
  #         PRODUCTION_ECS_CLUSTER: ${{ secrets.PRODUCTION_ECS_CLUSTER }}
  #         PRODUCTION_ECS_SERVICE: ${{ secrets.PRODUCTION_ECS_SERVICE }}
  #         ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  #         GITHUB_SHA: ${{ github.sha }}
  #         GITHUB_RUN_NUMBER: ${{ github.run_number }}
      
  #     - name: Verify production deployment
  #       run: |
  #         echo "Waiting for deployment to be ready..."
  #         sleep 30
  #         curl -f ${{ secrets.PRODUCTION_API_URL }}/health || exit 1
  #         curl -f ${{ secrets.PRODUCTION_FRONTEND_URL }} || exit 1
  #         echo "Production deployment successful!"
      
  #     - name: Create release tag
  #       run: |
  #         git tag v${{ github.run_number }}
  #         git push origin v${{ github.run_number }}
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # rollback:
  #   runs-on: ubuntu-latest
  #   if: failure()
  #   environment: production
    
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
      
  #     - name: Make rollback script executable
  #       run: chmod +x scripts/rollback.sh
      
  #     - name: Rollback deployment
  #       run: ./scripts/rollback.sh
  #       env:
  #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  #         PRODUCTION_ECS_CLUSTER: ${{ secrets.PRODUCTION_ECS_CLUSTER }}
  #         PRODUCTION_ECS_SERVICE: ${{ secrets.PRODUCTION_ECS_SERVICE }}
  #         ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  #         GITHUB_SHA: ${{ github.sha }}</content>